
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Ridge
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
np.random.seed(42)

n_samples = 1200
temperature = np.random.uniform(5, 45, n_samples)
humidity = np.random.uniform(10, 85, n_samples)
soil_moisture = np.random.uniform(10, 60, n_samples)
irrigation_hours = np.random.uniform(0, 10, n_samples)
fertilizer_usage = np.random.uniform(0, 50, n_samples)
equipment_runtime = np.random.uniform(1, 24, n_samples)

power_usage = (temperature * 0.35) + (humidity * 0.25) +               (soil_moisture * 0.15) + (irrigation_hours * 2.5) +               (fertilizer_usage * 0.2) + (equipment_runtime * 3.0) +               np.random.normal(0, 5, n_samples)

data = pd.DataFrame({
    'Temperature': temperature,
    'Humidity': humidity,
    'Soil_Moisture': soil_moisture,
    'Irrigation_Hours': irrigation_hours,
    'Fertilizer_Usage': fertilizer_usage,
    'Equipment_Runtime': equipment_runtime,
    'Power_Usage': power_usage
})

X = data[['Temperature', 'Humidity', 'Soil_Moisture', 'Irrigation_Hours', 'Fertilizer_Usage', 'Equipment_Runtime']]
y = data['Power_Usage']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = Ridge(alpha=1.0)
model.fit(X_train_scaled, y_train)
y_pred = model.predict(X_test_scaled)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse:.2f}')
print(f'R^2 Score: {r2:.2f}')

plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.7, c='green')
plt.xlabel('Actual Power Usage (kWh)')
plt.ylabel('Predicted Power Usage (kWh)')
plt.title('Actual vs Predicted Power Usage in Smart Farm System')
plt.grid(True)
plt.show()

import joblib
joblib.dump(model, 'smart_farm_power_model.pkl')
joblib.dump(scaler, 'scaler_farm.pkl')

data.to_csv('smart_farm_data.csv', index=False)

print("\nModel training complete!")
print("Ridge regression model and scaler saved as 'smart_farm_power_model.pkl' and 'scaler_farm.pkl'.")
print("Simulated dataset saved as 'smart_farm_data.csv'.")

temperature_new = np.random.uniform(5, 45, 5)
humidity_new = np.random.uniform(10, 85, 5)
soil_moisture_new = np.random.uniform(10, 60, 5)
irrigation_hours_new = np.random.uniform(0, 10, 5)
fertilizer_usage_new = np.random.uniform(0, 50, 5)
equipment_runtime_new = np.random.uniform(1, 24, 5)